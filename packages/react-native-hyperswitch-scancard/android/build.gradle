buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['HyperswitchScancard_kotlinVersion']


  parent.allprojects {
    repositories {
      maven {
        url "https://maven.hyperswitch.io/release/production/android/maven/1.0.9"
      }
    }
  }
  repositories {
    google()
    mavenCentral()
  }


  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.3'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0'
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'


if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['HyperswitchScancard_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['HyperswitchScancard_' + name]).toInteger()
}

android {

  viewBinding {
    enabled = true
  }

  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(projectDir,
      '/../../../node_modules/react-native/android')
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(parentDir,
        'node_modules/react-native')

      def androidPrebuiltBinaryDir = new File(parentDir,
        'node_modules/react-native/android')

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException("${project.name}: unable to locate React Native android sources. " + "Ensure you have you installed React Native as a dependency in your project and try again.")
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation 'androidx.activity:activity:1.4.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
  implementation "androidx.activity:activity-ktx:1.4.0"
  implementation "androidx.core:core-ktx:1.7.0"
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'org.tensorflow:tensorflow-lite:2.11.0'
  implementation 'org.tensorflow:tensorflow-lite-support:0.4.3'
  implementation 'io.hyperswitch:base-release:1.0.0'
  implementation 'io.hyperswitch:camera-core-release:1.0.0'
  implementation 'io.hyperswitch:cardscan-release:1.0.0'
  implementation 'io.hyperswitch:hscardscan-release:1.0.0'


// From node_modules
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "HyperswitchScancard"
    codegenJavaPackageName = "com.reactnativehyperswitchscancard"
  }
}
